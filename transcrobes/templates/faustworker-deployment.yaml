{{- if .Values.faustworker.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "transcrobes.transcrobes.fullname" . }}-faustworker
  labels:
    {{- include "transcrobes.faustworker.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.faustworker.replicaCount }}
  {{- if .Values.faustworker.strategy }}
  strategy:
{{ toYaml .Values.faustworker.strategy | indent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "transcrobes.faustworker.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- if .Values.faustworker.podAnnotations }}
      annotations:
{{ toYaml .Values.faustworker.podAnnotations | indent 8 }}
    {{- end }}
      labels:
        {{- include "transcrobes.faustworker.labels" . | nindent 8 }}
    spec:
      initContainers:
        - name: check-db-ready
          image: postgres:13
          command: ['sh', '-c',
            'until psql -c "select 1;";
            do echo waiting for database; sleep 2; done;']
          env:
            - name: PGUSER
              value: "{{ .Values.pgha.postgresql.username }}"
            - name: PGDATABASE
              value: "{{ .Values.pgha.postgresql.database }}"
            - name: PGPASSWORD
              value: "{{ .Values.pgha.postgresql.password }}"
            - name: PGHOST
              value: "{{ .Release.Name }}-pgha-pgpool"

      containers:
        - name: {{ template "transcrobes.name" . }}-{{ .Values.faustworker.name }}
          image: "{{ .Values.transcrobes.image.repository }}:{{ .Values.transcrobes.image.tag }}"
          imagePullPolicy: {{ .Values.transcrobes.image.pullPolicy }}
          command: ["/bin/bash", "/app/scripts/runmanage.sh"]
          args: ["events_processor"]
          env:
            {{- range $key, $value := .Values.faustworker.extraEnv }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
            {{- if .Values.faustworker.debug }}
            - name: TRANSCROBES_DEBUG
              value: "True"
            {{- end }}
            - name: PYTHONUNBUFFERED  # MUST put or no logs printed to kube, but probably should be in values
              value: "0"
            - name: TC_POSTGRES_USER
              value: "{{ .Values.pgha.postgresql.username }}"
            - name: TC_POSTGRES_DATABASE
              value: "{{ .Values.pgha.postgresql.database }}"
            - name: TC_POSTGRES_PASSWORD
              value: "{{ .Values.pgha.postgresql.password }}"
            - name: TC_POSTGRES_HOST
              value: "{{ .Release.Name }}-pgha-pgpool"
            - name: TRANSCROBES_SECRET_KEY
              value: "{{ .Values.transcrobes.secretKey }}"
            - name: TRANSCROBES_KAFKA_BROKER
              value: "{{ .Values.kafka.fullnameOverride }}"
            - name: TRANSCROBES_KAFKA_CONSUMER_TIMEOUT_MS
              value: "{{ .Values.faustworker.kafkaConnection.consumerTimeoutMs }}"
            - name: TRANSCROBES_KAFKA_STATS_LOOP_SLEEP_SECS
              value: "{{ .Values.faustworker.kafkaConnection.statsLoopSleepSecs }}"
            - name: TRANSCROBES_KAFKA_MAX_POLL_RECORDS
              value: "{{ .Values.faustworker.kafkaConnection.maxPollRecords }}"

      {{- if .Values.transcrobes.persistence.enabled }}
          volumeMounts:
          - mountPath: "{{ .Values.transcrobes.persistence.dataRoot }}"
            name: {{ include "transcrobes.transcrobes.fullname" . }}
      volumes:
        - name: {{ include "transcrobes.transcrobes.fullname" . }}
          persistentVolumeClaim:
            claimName: {{ include "transcrobes.transcrobes.fullname" . }}
      {{- end }}

      restartPolicy: Always
status: {}
{{- end }}

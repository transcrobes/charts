{{- if .Values.transcrobes.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "transcrobes.transcrobes.fullname" . }}
  labels:
    {{- include "transcrobes.transcrobes.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.transcrobes.replicaCount }}
  {{- if .Values.transcrobes.strategy }}
  strategy:
{{ toYaml .Values.transcrobes.strategy | indent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "transcrobes.transcrobes.matchLabels" . | nindent 6 }}
      # release: prometheus
  template:
    metadata:
    {{- if .Values.transcrobes.podAnnotations }}
      annotations:
{{ toYaml .Values.transcrobes.podAnnotations | indent 8 }}
    {{- end }}
      labels:
        {{- include "transcrobes.transcrobes.labels" . | nindent 8 }}
        # release: prometheus
    spec:
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              component: transcrobes

      initContainers:
        - name: check-db-ready
          image: postgres:14
          command: ['sh', '-c',
            'until psql -c "select 1;";
            do echo waiting for database; sleep 2; done;']
          env:
            - name: PGUSER
              value: "{{ .Values.pgha.postgresql.username }}"
            - name: PGDATABASE
              value: "{{ .Values.pgha.postgresql.database }}"
            - name: PGPASSWORD
              value: "{{ .Values.pgha.postgresql.password }}"
            - name: PGHOST
              value: {{ .Values.transcrobes.overrideDBHost | default (printf "%s-pgha-pgpool" .Release.Name) }}

      containers:
        - name: {{ template "transcrobes.name" . }}-{{ .Values.transcrobes.name }}
          image: "{{ .Values.transcrobes.image.repository }}:{{ .Values.transcrobes.image.tag }}"
          imagePullPolicy: {{ .Values.transcrobes.image.pullPolicy }}
          {{ if not .Values.transcrobes.application.useGunicorn }}command: ['/start-uvicorn.sh']{{ end }}

          livenessProbe:
            httpGet:
              path: /api/v1/utils/hello
              port: http
              httpHeaders:
                - name: Host
                  value: "{{ .Values.transcrobes.haHost }}"
            timeoutSeconds: {{ .Values.transcrobes.liveness.timeoutSeconds }}
            periodSeconds: {{ .Values.transcrobes.liveness.periodSeconds }}
            initialDelaySeconds: {{ .Values.transcrobes.liveness.initialDelaySeconds }}
            failureThreshold: {{ .Values.transcrobes.liveness.failureThreshold }}

          startupProbe:
            httpGet:
              host:
              scheme: HTTP
              port: http
              path: /api/v1/enrich/load_definitions_cache
              httpHeaders:
                - name: Host
                  value: "{{ .Values.transcrobes.haHost }}"
            timeoutSeconds: {{ .Values.transcrobes.startup.timeoutSeconds }}
            periodSeconds: {{ .Values.transcrobes.startup.periodSeconds }}
            initialDelaySeconds: {{ .Values.transcrobes.startup.initialDelaySeconds }}
            failureThreshold: {{ .Values.transcrobes.startup.failureThreshold }}

          ports:
            - name: http
              containerPort: {{ .Values.transcrobes.application.listenPort }}
              protocol: TCP
          env:
            - name: TRANSCROBES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: TRANSCROBES_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: TRANSCROBES_HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP

            - name: TRANSCROBES_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

            - name: TRANSCROBES_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- range $key, $value := .Values.transcrobes.extraEnv }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
            - name: PYTHONUNBUFFERED  # MUST put or no logs printed to kube, but probably should be in values
              value: "0"
            - name: POSTGRES_USER
              value: "{{ .Values.pgha.postgresql.username }}"
            - name: POSTGRES_DB
              value: "{{ .Values.pgha.postgresql.database }}"
            - name: POSTGRES_PASSWORD
              value: "{{ .Values.pgha.postgresql.password }}"
            - name: POSTGRES_SERVER
              value: {{ .Values.transcrobes.overrideDBHost | default (printf "%s-pgha-pgpool" .Release.Name) }}
            - name: POSTGRES_PORT
              value: "{{ .Values.pgha.service.ports.postgresql }}"
            - name: MEDIA_ROOT
              value: "{{ .Values.transcrobes.persistence.dataRoot }}{{ .Values.transcrobes.persistence.mediaPath }}"
            - name: DATA_ROOT
              value: "{{ .Values.transcrobes.persistence.dataRoot }}{{ .Values.transcrobes.persistence.dataPath }}"
            - name: SYSTEM_HOSTS
              value: {{ include "transcrobes.transcrobes.fullname" . }},{{ include "transcrobes.transcrobes.reallyFullname" . }}
            - name: IMPORT_MAX_UPLOAD_SIZE_KB
              value: "{{ .Values.transcrobes.application.imports.maxListImportSizeKB }}"
            - name: NODE_HOSTS
              value: {{ include "transcrobes.nodeHosts" . }},
            - name: SERVER_NAME
              value: {{ include "transcrobes.transcrobes.reallyFullname" . }}
            - name: HA_HOST
              value: "{{ .Values.transcrobes.haHost }}"
            - name: SERVER_HOST
              value: "http{{ if .Values.transcrobes.ingress.tls.enabled }}s{{ end }}://{{ .Values.transcrobes.haHost }}"
            - name: SECRET_KEY
              value: "{{ .Values.transcrobes.secretKey }}"
            {{- if gt .Values.transcrobes.application.webConcurrency 0.0 }}
            - name: WEB_CONCURRENCY
              value: "{{ .Values.transcrobes.application.webConcurrency }}"
            {{ else }}
            - name: MAX_WORKERS
              value: "{{ .Values.transcrobes.application.maxWorkers }}"
            - name: WORKERS_PER_CORE
              value: "{{ .Values.transcrobes.application.workersPerCore }}"
            {{- end }}
            - name: GUNICORN_TIMEOUT
              value: "{{ .Values.transcrobes.application.gunicornTimeout }}"
            - name: LISTEN_ADDRESS
              value: "{{ .Values.transcrobes.application.listenAddress }}"
            - name: LISTEN_PORT
              value: "{{ .Values.transcrobes.application.listenPort }}"
            - name: ZH_CORENLP_HOST
              value: {{ include "transcrobes.corenlpZh.fullname" . }}
            {{- if .Values.transcrobes.debug }}
            - name: TRANSCROBES_DEBUG
              value: "True"
            {{- end }}
            - name: BING_SUBSCRIPTION_KEY
              value: "{{ .Values.transcrobes.bingSubscriptionKey }}"
            - name: BING_API_HOST
              value: "{{ .Values.transcrobes.bingApiHost }}"
            - name: ZH_EN_CEDICT_PATH
              value: "{{ .Values.transcrobes.persistence.dataRoot }}{{ .Values.transcrobes.zhEnCedict.path }}"
            - name: ZH_EN_CEDICT_INMEM
              value: "{{ .Values.transcrobes.zhEnCedict.inmem }}"
            - name: ZH_EN_ABC_DICT_PATH
              value: "{{ .Values.transcrobes.persistence.dataRoot }}{{ .Values.transcrobes.zhEnAbcDict.path }}"
            - name: ZH_EN_ABC_DICT_INMEM
              value: "{{ .Values.transcrobes.zhEnAbcDict.inmem }}"
            - name: ZH_HSK_LISTS_PATH
              value: "{{ .Values.transcrobes.persistence.dataRoot }}{{ .Values.transcrobes.zhHskLists.path }}"
            - name: ZH_HSK_LISTS_INMEM
              value: "{{ .Values.transcrobes.zhHskLists.inmem }}"
            - name: BING_TRANSLATOR_INMEM
              value: "{{ .Values.transcrobes.bingTranslator.inmem }}"
            - name: BING_TRANSLITERATOR_INMEM
              value: "{{ .Values.transcrobes.bingTransliterator.inmem }}"
            - name: ZH_SUBTLEX_FREQ_PATH
              value: "{{ .Values.transcrobes.persistence.dataRoot }}{{ .Values.transcrobes.zhSubtlexFreq.path }}"
            - name: ZH_SUBTLEX_FREQ_INMEM
              value: "{{ .Values.transcrobes.zhSubtlexFreq.inmem }}"
            - name: BROACASTER_MESSAGING_LAYER
              value: "{{ .Values.transcrobes.broadcasterMessagingLayer }}"

            - name: PROJECT_NAME
              value: {{ include "transcrobes.transcrobes.fullname" . }}
            - name: FIRST_SUPERUSER
              value: "{{ .Values.transcrobes.firstSuperuser }}"
            - name: FIRST_SUPERUSER_PASSWORD
              value: "{{ .Values.transcrobes.firstSuperuserPassword }}"

            - name: SMTP_TLS
              value: "{{ .Values.transcrobes.email.smtpTls }}"
            - name: SMTP_PORT
              value: "{{ .Values.transcrobes.email.smtpPort }}"
            - name: SMTP_HOST
              value: "{{ .Values.transcrobes.email.smtpHost }}"
            - name: SMTP_USER
              value: "{{ .Values.transcrobes.email.smtpUser }}"
            - name: SMTP_PASSWORD
              value: "{{ .Values.transcrobes.email.smtpPassword }}"
            - name: EMAILS_FROM_EMAIL
              value: "{{ .Values.transcrobes.email.emailsFromEmail }}"
            - name: EMAILS_FROM_NAME
              value: "{{ .Values.transcrobes.email.emailsFromName }}"
            - name: EMAILS_ENABLED
              value: "{{ .Values.transcrobes.email.enabled }}"
            - name: EMAIL_RESET_TOKEN_EXPIRE_HOURS
              value: "{{ .Values.transcrobes.email.emailResetTokenExpireHours }}"
            - name: EMAIL_TEMPLATES_DIR
              value: "{{ .Values.transcrobes.email.emailTemplatesDir }}"
            - name: EMAIL_TEST_USER
              value: "{{ .Values.transcrobes.email.emailTestUser }}"

            - name: FAUST_HOST
              value: {{ include "transcrobes.faustworker.fullname" . }}
            - name: FAUST_PORT
              value: "{{ .Values.faustworker.application.port }}"

            - name: USERS_OPEN_REGISTRATION
              value: "{{ .Values.transcrobes.usersOpenRegistration }}"

            - name: SENTRY_DSN
              value: "{{ .Values.transcrobes.sentryDsn }}"

            - name: TRACKING_KEY
              value: "{{ .Values.transcrobes.tracking.key }}"
            - name: TRACKING_ENDPOINT
              value: "{{ .Values.transcrobes.tracking.endpoint }}"

            {{- if .Values.kafka.enabled }}
            - name: KAFKA_BROKER
              value: {{ .Values.transcrobes.overrideKafkaHost | default .Values.kafka.fullnameOverride }}
            {{- end }}

      {{- if .Values.transcrobes.persistence.enabled }}
          volumeMounts:
          - mountPath: "{{ .Values.transcrobes.persistence.dataRoot }}"
            name: {{ include "transcrobes.transcrobes.fullname" . }}
      volumes:
        - name: {{ include "transcrobes.transcrobes.fullname" . }}
          persistentVolumeClaim:
            claimName: {{ include "transcrobes.transcrobes.fullname" . }}
      {{- end }}

      restartPolicy: Always
status: {}
{{- end }}
